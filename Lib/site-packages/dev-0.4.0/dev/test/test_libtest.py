##
# .test.test_libtest - libtest tests
##
from .. import libtest

def test_Test_init(test):
	f = lambda x: False
	t = libtest.Test(f)
	test.fail_if_not_exact(None, t.identity)
	test.fail_if_not_exact(None, t.fate)
	test.fail_if_not_exact(f, t.entry_point)
	test.fail_if_not_equal("initialized", t.point)

def test_Test_fail(test):
	def t(test):
		test.fail("foo")
	t = libtest.Test(t)
	t.run()
	test.fail_if_not_instance(t.fate, libtest.Fail)
	test.fail_if_not_equal("foo", t.fate.message)

def test_Test_error(test):
	def t(test):
		raise TypeError("foo")
	t = libtest.Test(t)
	t.run()
	test.fail_if_not_instance(t.fate, libtest.Error)

def raise_parameter(excvalue):
	raise excvalue

def test_Test_finr_nothing_raised(test):
	class SomeException(Exception):
		pass
	def t(test):
		def does_not_raise():
			pass
		test.fail_if_not_raised(SomeException, does_not_raise)
	t = libtest.Test(t)
	t.run()
	test.fail_if_not_instance(t.fate, libtest.Fail)
	# XXX: check more details

def test_Test_finr_incorrect_exception(test):
	class SomeException(Exception):
		pass
	def raise_wrong_exception(test):
		# also validates that the callable is receiving the following arguments
		test.fail_if_not_raised(SomeException, raise_parameter, ValueError("eek"))
	t = libtest.Test(raise_wrong_exception)
	t.run()
	test.fail_if_not_instance(t.fate, libtest.Fail)
	# XXX: check more details

def test_Test_finr_correct_exception(test):
	class SomeException(Exception):
		pass
	def t(test):
		def raise_correct_exception():
			raise SomeException()
		test.fail_if_not_raised(SomeException, raise_correct_exception)
		test.fail_if_not_raised((SomeException,), raise_correct_exception)
		test.fail_if_not_raised((ValueError, SomeException,), raise_correct_exception)
	t = libtest.Test(t)
	t.run()
	test.fail_if_not_instance(t.fate, libtest.Pass)
	# XXX: check more details

def test_Test_fir_nothing_raised(test):
	class SomeException(Exception):
		pass
	def t(test):
		def does_not_raise():
			pass
		test.fail_if_raised(SomeException, does_not_raise)
	t = libtest.Test(t)
	t.run()
	test.fail_if_not_instance(t.fate, libtest.Pass)
	# XXX: check more details

def test_Test_fir_match_raised(test):
	class SomeException(Exception):
		pass
	def t(test):
		def raises_bad_exception():
			raise SomeException()
		test.fail_if_raised(SomeException, raises_bad_exception)
	t = libtest.Test(t)
	t.run()
	test.fail_if_not_instance(t.fate, libtest.Fail)
	# XXX: check more details

def test_Test_fir_raised(test):
	class SomeException(Exception):
		pass
	def t(test):
		def raises_okay_exception():
			raise ValueError(None)
		test.fail_if_raised(SomeException, raises_okay_exception)
	t = libtest.Test(t)
	t.run()
	test.fail_if_not_instance(t.fate, libtest.Pass)
	# XXX: check more details

def test_Test_trap_fail(test):
	class SomeException(Exception):
		pass
	def t(test):
		with test.trap(SomeException):
			pass
	t = libtest.Test(t)
	t.run()
	test.fail_if_not_instance(t.fate, libtest.Fail)

def test_Test_trap_exercise(test):
	class SomeException(Exception):
		pass
	with test.trap(SomeException):
		raise SomeException()

def test_Test_trap_pass(test):
	class SomeException(Exception):
		pass
	def t(test):
		with test.trap(SomeException):
			raise SomeException()
	t = libtest.Test(t)
	t.run()
	test.fail_if_not_instance(t.fate, libtest.Pass)

def test_Test_fi_empty(test):
	# test failing
	def t(test):
		test.fail_if_empty(('foo',))
	T = libtest.Test(t)
	T.run()
	test.fail_if_not_instance(T.fate, libtest.Pass)
	# test passing
	def t(test):
		test.fail_if_empty(())
	T = libtest.Test(t)
	T.run()
	test.fail_if_not_instance(T.fate, libtest.Fail)

def test_Test_fin_empty(test):
	# test failing
	def t(test):
		test.fail_if_not_empty(('foo',))
	T = libtest.Test(t)
	T.run()
	test.fail_if_not_instance(T.fate, libtest.Fail)
	# test passing
	def t(test):
		test.fail_if_not_empty(())
	T = libtest.Test(t)
	T.run()
	test.fail_if_not_instance(T.fate, libtest.Pass)

def test_Test_skip(test):
	def t(test):
		test.skip("test")
	t = libtest.Test(t)
	t.run()
	test.fail_if_not_instance(t.fate, libtest.Skip)
	test.fail_if_not_equal("test", t.fate.message)

def test_Test_fih(test):
	def t(test):
		test.fail_if_hasattr(test, "fail_if_hasattr")
	t = libtest.Test(t)
	t.run()
	test.fail_if_not_instance(t.fate, libtest.Fail)

	o = object()
	def t(test):
		test.fail_if_hasattr(o, "test_if_hasattr")
	t = libtest.Test(t)
	t.run()
	test.fail_if_not_instance(t.fate, libtest.Pass)

def test_Test_finh(test):
	def t(test):
		test.fail_if_not_hasattr(test, "fail_if_hasattr")
	t = libtest.Test(t)
	t.run()
	test.fail_if_not_instance(t.fate, libtest.Pass)

	o = object()
	def t(test):
		test.fail_if_not_hasattr(o, "test_if_hasattr")
	t = libtest.Test(t)
	t.run()
	test.fail_if_not_instance(t.fate, libtest.Fail)

if __name__ == '__main__':
	from .. import libtest; libtest.execmodule()
