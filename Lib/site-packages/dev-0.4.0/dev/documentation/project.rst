=======
Project
=======

Introduction
============

In the course of developing a Python project, writing tests is part of the
experience.

Structure
=========

Dev is structured as a single Python package. Everything pertinent to
Dev's operation is contained within the :py:mod:`dev` package.

The :py:mod:`dev.release` package deals with distribution and contains
project release management code.

The :py:mod:`dev.documentation` package module houses the project's
documentation. Therein, the `html` directory can be referenced locally to read
this documentation.

The :py:mod:`dev.libtest` module provides functions for collecting and running
tests.

Requirements
============

dev has no requirements other than a functioning Python installation.

Conventions
===========

Terminology:

 Fate
  The result of a test. Normally, Pass or Fail.

Defense
=======

This project exists as an alternative to some of the modules provided in the
standard library. The defense for each module is presented in their own section.

libtest
-------

libtest provides an alternative to the standard library's unittest module.
py.test is a great project, and may be the correct choice for many
individuals.

However, libtest is being developed with a few primary goals:

 1. Simple. Implementation should be extremely small and
    easy to understand.
 2. Developer Execution Interface
 3. Automated Execution Interface

skeleton
--------

When working with modular architectures that involve many small projects, quick
access to the manifestion of a new project saves time.

Bylaws
======

 * Development of a test framework whose purpose is simplicity and conciseness.
 * Development of an improved debugger.
 * Development of profiler and coverage context that can be easily augmented to test runs.
   Likely depending on Ned's work.
 * Maintenance of the project skeleton.
